// 👉 Remove command prefix
PennController.ResetPrefix(null);

// 👉 Remove progress bar: 

var showProgressBar = false; //hide progress bar2

// 👉 Sequence: 

Sequence(
    "instructions-researcher-1", // INSERT CHILD NAME
    "instructions--child--1",  // INSTRUCTIONS FOR NEUTRAL
   "countdownTrial",  // COUNTDOWN NEUTRAL PRACTICE
 //   randomize("practice--neutral--block"), // PRACTICE NEUTRAL
//    "begin--trial",  // CHECK VARIABLE NEUTRAL
//    "countdownTrial", // PREPARE YOURSELF NEUTRAL
//   randomize("neutral--block"), // EXPERIMENTAL TRIAL NEUTRAL
"instructions--child--2", // INSTRUCTIONS FOR CONFLICT
// "countdownTrial--2",  // COUNTDOWN CONFLICT PRACTICE 
// randomize("practice--conflict--block"), // CONFLICT PRACTICE
// "begin--trial--2",  // CHECK VARIABLE CONFLICT
 "countdownTrial", // PREPARE YOURSELF CONFLICT
//   randomize("conflict--block"), // EXPERIMENTAL CONFLICT
"instructions--child--3", // FINAL SCREEN CHILDREN
    "sendResults", 
    "final-screen-trial"  // WAIT FOREVER.
);


// 👉 Create header:

Header(
    // Declare a global Var element "ID" in which we will store the participant's ID
    newVar("ID").global()   
    )
.log( "id" , getVar("ID") ); // Add the ID to all trials' results lines


// Create global vars to test 👉

let centerWelcomeMsgCanva = 210; // Adjusted to center horizontally
let centerFormCanva = 160; // Adjusted to center horizontally
let centerTypeIdMsgCanva = 135; // Adjusted to center horizontally
let centerBtnCanva = 300; // Adjusted to center horizontally
let centerBtnErrorMsg = 70; // Adjusted to center horizontally

// 👉 Instructions trial 
newTrial("instructions-researcher-1",
  defaultText.center()
    .print()
    .cssContainer({
          'margin-top': '1.5em',
          'text-align': 'center',
          "justify-content": 'center',
          "align-items": 'center' ,
          'font-size': '35px',
          "white-space": "nowrap",
  })
,
newText("welcome-researcher-msg", "Bem vindo(a) ao <i style= 'color:red; background-color: yellow; border-radius: 5px;';>Simon Task</i>!")
     .center().print()
    .cssContainer({
          'font-size': '45px',
          "white-space": "nowrap"  
})
,
newText("type-ID-msg", "<br>Por favor, digite <b style=color:red;>o nome do(a) participante </b> abaixo e clique em <b>COMEÇAR</b>.</br>")
        .cssContainer({
            "padding": "2em",
            "font-size":"20px"})
    ,
    newTextInput("inputID", "")
        .center()
        .css({
            "margin":"2em",  // Add a em margin around this element
            "height":"50px",
            "width": '500px',
            "border":"#FFFCF1",
            "border-radius": "4px",
            "font-size": '45px',
            "background-color": "#E0F7FA"
        })
             
        .print()
,
newCanvas("my-canvas", 950, 625) // 950, 625
      .add(centerWelcomeMsgCanva,130, getText("welcome-researcher-msg"))
      .add(centerTypeIdMsgCanva,170,getText("type-ID-msg"))
      .add(centerFormCanva,220,getTextInput("inputID"))
      .add(centerBtnCanva, 380, newButton("wait", "COMEÇAR EXPERIMENTO 👉"))
      .add(centerBtnErrorMsg,400, newText("failure--id","Por favor, digite o nome do(a) participante acima 👆").hidden() )
      
      .cssContainer({
        "padding": "1,5em",
        "background-color": '#FFFCF1',
        "border-radius": '25px',
        "border": '2px solid #73AD21',
        "background-image": "url('room1.jpg')", 
        "background-size": "cover",
      })
      .center()
      .print()
,
getButton("wait")
.css({
      "align-items": "center",
      "background-image": "linear-gradient(to top left, #39b385, #9be15d)",
      border: "0",
      "border-radius": "8px",
      "box-shadow": "rgba(151, 65, 252, 0.2) 0 15px 30px -5px",
      "box-sizing": "border-box",
      color: "#FFFFFF",
      display: "flex",
      "font-family": " Phantomsans, sans-serif",
      "font-size": "25px",
      "justify-content": "center",
      "line-height": "1em",
      "max-width": "100%",
      "min-width": "140px",
      padding: "19px 24px",
      "text-decoration": "none",
      "user-select": "none",
      "-webkit-user-select": " none",
      "touch-action": "manipulation",
      "white-space": "nowrap",
      cursor: "pointer",
    })
// Only validate a click on Start when inputID has been filled
        .wait( getTextInput("inputID").testNot.text("") 
        .failure( getText("failure--id").visible() 
        .cssContainer({
         //   "margin-top": "1em",
          "white-space": "nowrap",
          "color": "red"})
         .center()
         ))
  .center() // the btn
  .print()  // the btn
,
// Store the text from inputID into the Var element
    getVar("ID").set( getTextInput("inputID") )
);

// 👉 open fullscreen: 

newTrial('full-screen', 
newButton('goFull', 'full').print().wait(),
fullscreen()
);

// INSTRUCTIONS CHILD TRIAL 1 👇

newTrial('instructions--child--1',
defaultText.center().print().cssContainer({"font-family": "Comic Sans MS"})
,
defaultButton
    .css({
      "align-items": "center",
      "background-image": "linear-gradient(to top left, #39b385, #9be15d)",
      border: "0",
      "border-radius": "8px",
      "box-shadow": "rgba(151, 65, 252, 0.2) 0 15px 30px -5px",
      "box-sizing": "border-box",
      color: "#FFFFFF",
      display: "flex",
      "font-family": " Phantomsans, sans-serif",
      "font-size": "30px",
      "justify-content": "center",
      "line-height": "1em",
      "max-width": "100%",
      "min-width": "140px",
      padding: "19px 24px",
      "text-decoration": "none",
      "user-select": "none",
      "-webkit-user-select": " none",
      "touch-action": "manipulation",
      "white-space": "nowrap",
      cursor: "pointer",
    })
,
fullscreen()
,
    newText("my-name-msg", "Qual é seu nome?")
    .cssContainer({
    "font-size": "50px", 
    'background-color': 'yellow',
  //  "background-image": "linear-gradient(45deg, #f3ec78, #af4261)", 
    "border-radius": "25px"})
,
newHtml("animated-rocket", "<div></div>")
    .css({
      "width": "50em",  // Adjust the width
      "height": "50em", // Adjust the height
      "background-image": "url('rocketUp.png')",
      "background-size": "contain",
      "background-repeat": "no-repeat", // Prevent image repetition
      "position": "relative",
      "animation": "example 2.5s infinite alternate"
    })
    .center()
    .print(),

  newVar("animationCSS", `
    @keyframes example {
      0%   { background-position: center bottom; }
      50%  { background-position: center 200px; }
      100% { background-position: center bottom; }
    }
  `)
  .global(),

  getHtml("animated-rocket").css("animation-name", "example"),

  newFunction("loadAnimationCSS", ()=>{
    const animationStyle = document.createElement("style");
    animationStyle.type = "text/css";
    animationStyle.innerHTML = getVar("animationCSS").value;
    document.head.appendChild(animationStyle);
  })
  .call(),

  getFunction("loadAnimationCSS").call()
,
newCanvas("my-canvas-2", 1300, 725) // 950, 625
    .add(300, 190, getText("my-name-msg"))
    .add(365, 420, newButton("submit-fantasy-name-btn", "COMEÇAR! 👉").hidden())
  //  .add(180, 220, newText('welcome--fantasy--name--msg').hidden() ) // add child's name to canvas
    .add(650, -80, getHtml("animated-rocket"))
        .cssContainer({
        "padding": "2em",
        "background-color": '#FFFCF1',
        "border-radius": '25px',
        "border": '2px solid #73AD21',
        "background-image": "url('room1.jpg')", 
        "background-size": "cover",
      })
      .center()
      .print()
, 
newAudio("HiandQuestion", "nome.mp3").play().wait('first')
,
newVar("fantasy--name").global()
,
  newTextInput("fantasyNameInput", "")
  .center()
    .css({
            "margin":"2em",  // Add a em margin around this element
            "height":"50px",
            "width": '500px',
            "border":"#FFFCF1",
            "border-radius": "4px",
            "font-size": '45px',
            "background-color": "#E0F7FA"
        })
  //   .once()
    .print()
,
getCanvas('my-canvas-2').add(180, 220, getTextInput("fantasyNameInput"))
,
getButton("submit-fantasy-name-btn")
    .visible().center()
    // Only validate a click on Start when inputID has been filled
        .wait( getTextInput("fantasyNameInput").testNot.text("") 
        .failure( 
            newAudio('nomeFailAud', 'nomeFail.mp3').play().wait('first')
         ))
,
getVar("fantasy--name").set(getTextInput("fantasyNameInput"))
,   
getText('my-name-msg').remove() // Remove 'qual é seu nome?'
,
getButton("submit-fantasy-name-btn").remove() // Remove 'COMEÇAR' btn'
,
getTextInput("fantasyNameInput").remove() // Remove Text Input 
,
getCanvas('my-canvas-2').add(225, 220, newText('welcome--fantasy--name--msg')
                        .before(newText("hello", "Oi, "))
                        .after(newText("exclamantion--point", "! 😄")))
,
getText("welcome--fantasy--name--msg")
    .text(getVar("fantasy--name"))
    .cssContainer({
        "font-size": "80px",
        'background-color': 'yellow',
        "border-radius": "25px"
    })
,
newAudio("sparkle", "sparkle.mp3").play().wait("first")  // add sparkle sound when click 
,
newTimer("waitName", 1000).start().wait()
,
getText('welcome--fantasy--name--msg').remove() // remove child's name text
// ,
// newText('helpText', 'não sei oq colocar aqui').cssContainer({'font-size': '40px'})
// ,
// getCanvas('my-canvas-2').add(270, 220, getText('helpText'))
,
getCanvas('my-canvas-2').add(140, 30, newImage('foto1', 'foto1.png')
.css({
                        "width": "40em", // Replace with the desired width of the image in em units
                        "height": "40em", // Replace with the desired height of the image in em units 
                        "border-radius": "50%",
                        "border": "8px solid orange"
                         })
)
,
newAudio('missao', 'missao.mp3').play().wait('first') // Em uma missão espacial...
,
newTimer('waitExampleImg', 2000).start().wait()
, 
newAudio('left', 'esquerda2.mp3').play().wait("first") // a nave vai para a esquerda... 
,
getAudio('sparkle').play().wait('first')
,
getCanvas('my-canvas-2').add(140,30, newImage('leftImgEx', 'left.png') // display left png
.css({
                        "width": "40em", // Replace with the desired width of the image in em units
                        "height": "40em", // Replace with the desired height of the image in em units 
                        "border-radius": "50%",
                        "border": "8px solid orange"
                         })
)
,
getTimer('waitExampleImg', 2000).start().wait()  // wait for left png
,
getImage('leftImgEx').remove()  // remove left png
,
newAudio('right', 'direita2.mp3').play().wait("first") // outras vezes, a nave vai para a direita...
,
getAudio('sparkle').play().wait('first') 
,
getCanvas('my-canvas-2').add(140,30, newImage('rightImgEx', 'right.png') // display left png
.css({
                        "width": "40em", // Replace with the desired width of the image in em units
                        "height": "40em", // Replace with the desired height of the image in em units 
                        "border-radius": "50%",
                        "border": "8px solid orange"
                         })
)
,
getTimer('waitExampleImg', 2000).start().wait()  // wait for right png
,
getImage('rightImgEx').remove() // remove right png 
,
newAudio('helpAud', 'ajuda.mp3').play().wait('first') // nesses momentos, ela precisa de sua ajuda...
,
getTimer('waitExampleImg', 2000).start().wait()  
,
newAudio('apontarEsq', 'apontarEsquerda.mp3').play().wait('first')
,
getAudio('sparkle').play().wait('first')
,
getImage('foto1').remove() // remove girl
,
getCanvas('my-canvas-2').add(140,30, getImage('leftImgEx') // display left png
.css({
                        "width": "40em", // Replace with the desired width of the image in em units
                        "height": "40em", // Replace with the desired height of the image in em units 
                        "border-radius": "50%",
                        "border": "8px solid orange"
                         })
)
,
newAudio('apertarVerde', 'verde.mp3').play().wait('first')
,
getImage('leftImgEx').remove()
,
getCanvas('my-canvas-2').add(140,-20, newImage('greenKey', 'greenKey.png')
                         .css({
                        "width": "50em", // Replace with the desired width of the image in em units
                        "height": "50em", // Replace with the desired height of the image in em units 
                         }))
,
newAudio('keyPressAudio2', 'keyPress1.mp3').play().wait('first')
,
getTimer('waitExampleImg', 2000).start().wait()  
,
getImage('leftImgEx').remove() // remove left image
, 
getImage('greenKey').remove() // remove greenKey image
,
newAudio('apontarDir', 'apontarDireita.mp3').play().wait('first')
,
getAudio('sparkle').play().wait('first')
,
getCanvas('my-canvas-2').add(140,30, getImage('rightImgEx') // display right png
.css({
                        "width": "40em", // Replace with the desired width of the image in em units
                        "height": "40em", // Replace with the desired height of the image in em units 
                        "border-radius": "50%",
                        "border": "8px solid orange"
                         })
)
,
newAudio('apertarAzul', 'azul.mp3').play().wait('first')  // play apertar azul audio
,
getImage('rightImgEx').remove() // remove right pic
,
getCanvas('my-canvas-2').add(140,-20, newImage('blueKey', 'blueKey.png')
                         .css({
                        "width": "50em", // Replace with the desired width of the image in em units
                        "height": "50em", // Replace with the desired height of the image in em units 
                         }))
,
getAudio('keyPressAudio2').play().wait('first') 
,
getTimer('waitExampleImg', 2000).start().wait()  // wait right keyboard pic
,
getImage('blueKey').remove() // remove blueKey pic
,
newAudio('sinal', 'sinal.mp3').play().wait('first') // Às vezes, Crystal encontra um sinal misterioso....
,
getCanvas('my-canvas-2').add(140,30, newImage('cross', 'cross.png')
                         .css({
                        "width": "40em", // Replace with the desired width of the image in em units
                        "height": "40em", // Replace with the desired height of the image in em units 
                        "border-radius": "50%",
                        "border": "8px solid black"
                         }))
,
getAudio('sparkle').play().wait('first')
,
newTimer('waitCrossTimer', 3000).start().wait()  // wait sinal cross pic
,
getImage('cross').remove() // remove cross png
,
newAudio('espere', 'espere1.mp3').play().wait('first') // Quando isso acontecer, espere...
,
getCanvas('my-canvas-2').add(140,30, newImage('crossRed', 'crossRed.png') // shhow red arrow image
                         .css({
                        "width": "40em", // Replace with the desired width of the image in em units
                        "height": "40em", // Replace with the desired height of the image in em units 
                        "border-radius": "50%",
                        "border": "8px solid black"
                         }))
,
getAudio('sparkle').play().wait('first')
,
newAudio('espere2', 'espere2.mp3').play().wait('first') // e espere...
,
getTimer('waitCrossTimer').start().wait()  // wait sinal red cross  pic
,
getImage('crossRed').remove() // remove cross red pic
,
newAudio('letsPractice', 'treinar.mp3').play().wait('first')
,
getCanvas('my-canvas-2').add(140,-20, newImage('handsOnKey', 'handsOnKey.png')
                         .css({
                        "width": "50em", // Replace with the desired width of the image in em units
                        "height": "50em", // Replace with the desired height of the image in em units 
                         }))
,
newVar("errorCount",0).global() // create GLOBAL VAR to store errors during practice trials (both)
,
newTimer('transitionTimer', 3000).start().wait()
);

// INSTRUCTIONS CHILD TRIAL 2 👇

newTrial('instructions--child--2',
newFunction(() => {$("body").css("background-image", "url(back5.jpg)");}).call()
,
newAudio('shipAud', 'ship.mp3').play().wait('first')  // play ship audio (5s)
,
defaultText.center().print().cssContainer({"font-family": "Comic Sans MS"})
,
defaultButton
    .css({
      "align-items": "center",
      "background-image": "linear-gradient(to top left, #39b385, #9be15d)",
      border: "0",
      "border-radius": "8px",
      "box-shadow": "rgba(151, 65, 252, 0.2) 0 15px 30px -5px",
      "box-sizing": "border-box",
      color: "#FFFFFF",
      display: "flex",
      "font-family": " Phantomsans, sans-serif",
      "font-size": "30px",
      "justify-content": "center",
      "line-height": "1em",
      "max-width": "100%",
      "min-width": "140px",
      padding: "19px 24px",
      "text-decoration": "none",
      "user-select": "none",
      "-webkit-user-select": " none",
      "touch-action": "manipulation",
      "white-space": "nowrap",
      cursor: "pointer",
    })
,
newHtml("animated-rocket", "<div></div>")
    .css({
      "width": "50em",  // Adjust the width
      "height": "50em", // Adjust the height
      "background-image": "url('rocketUp.png')",
      "background-size": "contain",
      "background-repeat": "no-repeat", // Prevent image repetition
      "position": "relative",
      "animation": "example 2.5s infinite alternate"
    })
    .center()
    .print(),

  newVar("animationCSS", `
    @keyframes example {
      0%   { background-position: center bottom; }
      50%  { background-position: center 200px; }
      100% { background-position: center bottom; }
    }
  `)
  .global(),

  getHtml("animated-rocket").css("animation-name", "example"),

  newFunction("loadAnimationCSS", ()=>{
    const animationStyle = document.createElement("style");
    animationStyle.type = "text/css";
    animationStyle.innerHTML = getVar("animationCSS").value;
    document.head.appendChild(animationStyle);
  })
  .call(),

  getFunction("loadAnimationCSS").call()
,
newCanvas("my-canvas-3", 1300, 725) // 950, 625
    .add(650, -80, getHtml("animated-rocket"))
        .cssContainer({
        "padding": "2em",
        "background-color": '#FFFCF1',
        "border-radius": '25px',
        "border": '2px solid #73AD21',
        "background-image": "url('room1.jpg')", 
        "background-size": "cover",
      })
      .center()
      .print()
, 
getCanvas('my-canvas-3').add(215, 220, newText('congrats--fantasy--name--msg')
                        .before(newText("congrats", "Muito bem, "))
                        .after(newText("exclamantion--point--2", "! 🎉😄")))
,
getText("congrats--fantasy--name--msg")
    .text(getVar("fantasy--name"))
    .cssContainer({
        "font-size": "60px",
        'background-color': 'yellow',
        "border-radius": "25px"
    })
,
newAudio('positive-feedback', 'arrasou.mp3').play().wait('first') // você é muito bom, arrasou!
,
newTimer('waitExampleImg--2', 2000).start().wait()  // wait
,
getText('congrats--fantasy--name--msg').remove() // remove congrats, text!
,
newAudio('phase','fase.mp3').play().wait('first') // agora é a última fase!
,
getTimer("waitExampleImg--2").start().wait()
,
newAudio('planetPalavras', 'palavras.mp3').play().wait('first') // Agora, Cristal precisa ainda mais da sua ajuda para chegar ao Planeta das Palavras
, 
getCanvas('my-canvas-3').add(140,30, newImage('planetPalavrasImg', 'planet1.png') // show planetPalavrasImg 
.css({
                        "width": "40em", // Replace with the desired width of the image in em units
                        "height": "40em", // Replace with the desired height of the image in em units 
                        "border-radius": "50%",
                        "border": "8px solid black"
                         })
) 
,
newAudio('sparkle--2', 'sparkle.mp3').play().wait('first')
,
getTimer("waitExampleImg--2", + 1000).start().wait()
,
getImage('planetPalavrasImg').remove()
, 
getCanvas('my-canvas-3').add(140,30, newImage('sirenImg', 'siren.png') // show siren img
.css({
                        "width": "40em", // Replace with the desired width of the image in em units
                        "height": "40em", // Replace with the desired height of the image in em units 
                        "border-radius": "50%",
                        "border": "8px solid yellow"
                         })
)
,
newAudio('beCarefulAud', 'cuidado.mp3').play().wait() // Não importa em que lugar do espaço a nave esteja ...
,
getTimer("waitExampleImg--2").start().wait()
,
getImage('sirenImg').remove() // remove siren
,
newAudio('apontarEsq--2', 'apontarEsquerda.mp3').play().wait('first') // apontar esq
,
getAudio('sparkle--2').play().wait('first')
,
getCanvas('my-canvas-3').add(140,30, newImage('leftImgEx--2', 'left.png') // display left png
.css({
                        "width": "40em", // Replace with the desired width of the image in em units
                        "height": "40em", // Replace with the desired height of the image in em units 
                        "border-radius": "50%",
                        "border": "8px solid orange"
                         })
)
,
newAudio('apertarVerde--2', 'verde.mp3').play().wait('first')
,
getImage('leftImgEx--2').remove() // remove left img picture
,
getCanvas('my-canvas-3').add(140,-20, newImage('greenKey--2', 'greenKey.png') // show green key
                         .css({
                        "width": "50em", // Replace with the desired width of the image in em units
                        "height": "50em", // Replace with the desired height of the image in em units 
                         }))
,
newAudio('keyPressAudio3', 'keyPress1.mp3').play().wait('first')
,
getTimer('waitExampleImg--2', 2000).start().wait()  
,
getImage('leftImgEx--2').remove() // remove left image
, 
getImage('greenKey--2').remove() // remove greenKey image
,
newAudio('apontarDir--2', 'apontarDireita.mp3').play().wait('first') // apontar right...
,
getAudio('sparkle--2').play().wait('first')
,
getCanvas('my-canvas-3').add(140,30, newImage('rightImgEx--2', 'right.png') // display left png
.css({
                        "width": "40em", // Replace with the desired width of the image in em units
                        "height": "40em", // Replace with the desired height of the image in em units 
                        "border-radius": "50%",
                        "border": "8px solid orange"
                         })
)
,
newAudio('apertarAzul--2', 'azul.mp3').play().wait('first')  // play apertar azul audio
,
getImage('rightImgEx--2').remove() // remove right pic
,
getCanvas('my-canvas-3').add(140,-20, newImage('blueKey--2', 'blueKey.png')
                         .css({
                        "width": "50em", // Replace with the desired width of the image in em units
                        "height": "50em", // Replace with the desired height of the image in em units 
                         }))
,
getAudio('keyPressAudio3').play().wait('first') 
,
getTimer('waitExampleImg--2', 2000).start().wait()  // wait right keyboard pic
,
getImage('blueKey--2').remove() // remove blueKey pic
,
newAudio('rememberSignal', 'lembreSinal.mp3').play().wait('first')
,
getAudio('sparkle--2').play().wait('first')
,
getCanvas('my-canvas-3').add(140,30, newImage('crossRed--2', 'crossRed.png') // shhow red arrow image
                         .css({
                        "width": "40em", // Replace with the desired width of the image in em units
                        "height": "40em", // Replace with the desired height of the image in em units 
                        "border-radius": "50%",
                        "border": "8px solid black"
                         }))
,
newTimer('waitCrossTimer--2',2000).start().wait()  // wait sinal red cross  pic
,
getImage('crossRed--2').remove() // remove cross red pic
,
newAudio('letsPractice--2', 'treinar.mp3').play().wait('first')
,
getCanvas('my-canvas-3').add(140,-20, newImage('handsOnKey--2', 'handsOnKey.png')
                         .css({
                        "width": "50em", // Replace with the desired width of the image in em units
                        "height": "50em", // Replace with the desired height of the image in em units 
                         }))
,
newTimer('transitionTimer--2', 3000).start().wait()
);

// INSTRUCTIONS CHILD TRIAL 3 👇 // FINAL ENDGAME

newTrial('instructions--child--3',
newFunction(() => {$("body").css("background-image", "url(back5.jpg)");}).call()
,
defaultText.center().print().cssContainer({"font-family": "Comic Sans MS"})
,
defaultButton
    .css({
      "align-items": "center",
      "background-image": "linear-gradient(to top left, #39b385, #9be15d)",
      border: "0",
      "border-radius": "8px",
      "box-shadow": "rgba(151, 65, 252, 0.2) 0 15px 30px -5px",
      "box-sizing": "border-box",
      color: "#FFFFFF",
      display: "flex",
      "font-family": " Phantomsans, sans-serif",
      "font-size": "30px",
      "justify-content": "center",
      "line-height": "1em",
      "max-width": "100%",
      "min-width": "140px",
      padding: "19px 24px",
      "text-decoration": "none",
      "user-select": "none",
      "-webkit-user-select": " none",
      "touch-action": "manipulation",
      "white-space": "nowrap",
      cursor: "pointer",
    })
,
newHtml("animated-rocket", "<div></div>")
    .css({
      "width": "50em",  // Adjust the width
      "height": "50em", // Adjust the height
      "background-image": "url('rocketUp.png')",
      "background-size": "contain",
      "background-repeat": "no-repeat", // Prevent image repetition
      "position": "relative",
      "animation": "example 2.5s infinite alternate"
    })
    .center()
    .print(),

  newVar("animationCSS", `
    @keyframes example {
      0%   { background-position: center bottom; }
      50%  { background-position: center 200px; }
      100% { background-position: center bottom; }
    }
  `)
  .global(),

  getHtml("animated-rocket").css("animation-name", "example"),

  newFunction("loadAnimationCSS", ()=>{
    const animationStyle = document.createElement("style");
    animationStyle.type = "text/css";
    animationStyle.innerHTML = getVar("animationCSS").value;
    document.head.appendChild(animationStyle);
  })
  .call(),

  getFunction("loadAnimationCSS").call()
,
newCanvas("my-canvas-4", 1300, 725) // 950, 625
    .add(650, -80, getHtml("animated-rocket"))
        .cssContainer({
        "padding": "2em",
        "background-color": '#FFFCF1',
        "border-radius": '25px',
        "border": '2px solid #73AD21',
        "background-image": "url('room1.jpg')", 
        "background-size": "cover",
      })
      .center()
      .print()
, 
newAudio('shipAud', 'ship.mp3').play().wait('first')  // play ship audio (5s)
,
newAudio('conseguiu', 'planetaPalavras.mp3').play().wait('first')
,
getCanvas('my-canvas-4').add(140,30, newImage('planetPalavrasCristalImg', 'planet2.png') // show planetPalavrasImg 
.css({
                        "width": "40em", // Replace with the desired width of the image in em units
                        "height": "40em", // Replace with the desired height of the image in em units 
                        "border-radius": "50%",
                        "border": "8px solid black"
                         })
) 
,
newAudio('winAud', 'win.mp3').play().wait('first')
,
newTimer("waitExampleImg--3", 2000).start().wait()
,
newAudio('soon', 'ate.mp3').play().wait('first')
,
getTimer('waitExampleImg--3').start().wait()
);

// COUNTDOWN TRIAL 👇

newTrial("countdownTrial",
newFunction(() => {$("body").css("background-image", "url(back5.jpg)");}).call()
,

getVar("errorCount").set(0) // always reset the errorCount before countdown
,
//newTimer('biggerTimer', 5000).start()
newAudio('countdownAudio', 'cutCountdown.mp3').play()
,
    newVar("finishTime").set(v=>Date.now()+3000) // 5000ms = 5s
    ,
    newText("countDown", "3").print().center()
    .cssContainer({
        "text-align": "center",
        "font-size": "150px",
        "font-family": "Comic Sans MS"
    })
    ,
    // This Timer element will execute a callback after 1s
    newTimer("updateCountdown",1000).callback( 
        newVar("difference")
            .set(getVar("finishTime")).set(v=>v-Date.now())
            .test.is(v=>v>0) // Positive value means current time still below finish time
            .success(
                // Transform the Var element into an appropriately formatted string
                getVar("difference")
                    .set(v => Math.round(v / 1000)) // display time in s (ms/1000)
                ,
                getText("countDown").text(getVar("difference")) // update the text variable
                ,
                // Relaunch the timer to update again in 1s
                getTimer("updateCountdown").start()
            )
    ).start() // Don't forget to start the timer the initially
    ,
    newCanvas("my-canvas-3", 1300, 725) // 950, 625
    .add(570, 215, getText("countDown"))
        .cssContainer({
        "padding": "2em",
        "background-color": '#FFFCF1',
        "border-radius": '25px',
        "border": '2px solid #73AD21',
        "background-image": "url('room1.jpg')", 
        "background-size": "cover",
      })
      .center()
      .print()
    ,
   // getTimer('biggerTimer').wait()
   getAudio('countdownAudio').wait()
);

// 👉  MAKE PRACTICE TRIAL FUNCTION:

makePracticeTrial = label => row => newTrial( label , 
  defaultText.center().print()
  .cssContainer({
    'position': 'fixed',
    'top': '50%',
    'left': '50%',
    'transform': 'translate(-50%, -50%)',
    'text-align': 'center',
    'font-size': '6em',   // 60px in em units
    "white-space": "nowrap",
  })
  ,
  // change background-color: 
//   newFunction( ()=>$("body").css("background-color","yellow") ).call()
  newFunction(() => {$("body").css("background-image", "none");}).call()
//  ,
 // newVar("errorCount",0).global()  // COUNT ERRORS
  ,
  newText('fixationCross', '&#x2b;').center().print().cssContainer({'font-size': '200px'})
  ,
  newTimer('waitFixation', row.fixationTime).start().wait()
  ,
  getText('fixationCross').remove()
  ,
  newTimer("timeout",5000).start() // User has 5s to answer; otherwise => timeout
  ,
  newVar("position",row.position).set() 
  ,
  newImage('stimuli', row.direction).print()  // Print arrow left or right
  .css({
  "display": "block",
  "position": "fixed",
  "top": "50vh", // 50% of the viewport height
  "left": getVar("position").value, // Use 50% for horizontal centering and 15% and 85% left/right
  "transform": "translate(-50%, -50%)",
  "border-radius": "50%",
  "width": "25em", // Replace with the desired width of the image in em units
  "height": "25em", // Replace with the desired height of the image in em units
  "z-index": "9999", // To make sure the image is on top of other elements
})
,
newAudio('keyPressAudio', "keyPress1.mp3")
,
newKey("answerKey","SK")
        .log("all")
        .callback( getTimer("timeout").stop(), // the key stops the time
                   getAudio('keyPressAudio').play()) 
,
getTimer("timeout").wait() // wait for the timeout to finish (no keypress, the time isn't stoped) ???
,
getImage('stimuli').remove()
,
// Check for the correct key press or timeout
getKey("answerKey")
    .test.pressed(row.correctKey) // check keys
    .success(
        // Display "Correct" message and wait for positive feedback timer
      //  newText("Correct ✅").center().print(),
       newText("rightFeedBack", "😄").center().print(),
        newTimer('wait-positive-feedback', 500).start().wait()
    )
    .failure(
        // Check for timeout before displaying "Incorrect" message
        getKey("answerKey").disable().test.pressed()
        .failure(
            // Display "Timeout" message and wait for feedback timer
            getVar('errorCount').set(v=> v+1),
            newText("Consegue ir mais rápido? ⏰").center().print(),
            newTimer('wait-feedback', 500).start().wait()
        )
        .success(
            // Display "Incorrect" message and wait for negative feedback timer
            getVar('errorCount').set(v=> v+1),
         //   newText("Incorrect ❌").center().print(),
            newText("errorFeedBack","😄").center().print(),
            newTimer('wait-neg-feedback', 500).start().wait()
        )
    )
    
 //   ,
 //   newText("display").text( getVar("errorCount").print() )
 //   ,
 //   newTimer('checkVar', 500).start().wait()
);

// Practice NEUTRAL TRIAL 👇

Template( "simonStimuliPracticeNeutral.csv", makePracticeTrial("practice--neutral--block") );

// Practice CONFLICT TRIAL 👇

Template( "simonStimuliPracticeConflict.csv", makePracticeTrial("practice--conflict--block") );

// SHALL WE BEGIN - TRIAL ? 👇

newTrial("begin--trial",

// see if I can access the var of the other TRIAL

// newText("display-test").text( getVar("errorCount") ).print()

getVar("errorCount").test.is(v => v >= 2).success( // test if errorCount is >= 2
                     //   newText(" 2 errors !").center().print()  // PRINT ERROR ON SCREEN
                     //   ,
                        // getVar("errorCount").set(0) // reset the errorCount
                        // ,
                        newAudio('practiceAgainAud', 'practiceAgainAudio.mp3').play().wait('first')
                        ,
                        newFunction(() => {$("body").css("background-image", "url(back5.jpg)");}).call()
                      //  ,
                    //    exitFullscreen()
                        ,
                        jump("countdownTrial") // jump to instructions if errorCount >= 2
                    )
                    .failure( 
                        //newText(" NO 2 !").center().print(), // PRINT NO TWO ERRORS ON SCREEN
                     //    , 
                        newAudio('getReady', 'prepareSE.mp3').play().wait('first') // play audio and move on 
                    
            )
);

// 👉 Create function to all trials:

makeTrial = label => row => newTrial( label , 
newFunction(() => {$("body").css("background-image", "none");}).call() // restore background
,
  defaultText.center().print()
  .cssContainer({
    'position': 'fixed',
    'top': '50%',
    'left': '50%',
    'transform': 'translate(-50%, -50%)',
    'text-align': 'center',
    'font-size': '6em',   // 60px in em units
    "white-space": "nowrap",
  })
  ,
  newText('fixationCross', '&#x2b;').center().print().cssContainer({'font-size': '200px'})
  ,
  newTimer('waitFixation', row.fixationTime).start().wait()
  ,
  getText('fixationCross').remove()
  ,
  newTimer("timeout",5000).start() // User has 5s to answer; otherwise => timeout
  ,
  newVar("position",row.position).set() 
  ,
  newImage('stimuli', row.direction).print()  // Print arrow left or right
  .css({
  "display": "block",
  "position": "fixed",
  "top": "50vh", // 50% of the viewport height
  "left": getVar("position").value, // Use 50% for horizontal centering and 15% and 85% left/right
  "transform": "translate(-50%, -50%)",
  "border-radius": "50%",
  "width": "25em", // Replace with the desired width of the image in em units
  "height": "25em", // Replace with the desired height of the image in em units
  "z-index": "9999", // To make sure the image is on top of other elements
})
,
newVar("RT").global().set( v => Date.now() ) // compute Reaction Time
,
newAudio('keyPressAudio', "keyPress1.mp3")
,
newKey("answerKey","SK")
        .log("all")
        .callback( getTimer("timeout").stop(),
        getAudio('keyPressAudio').play()) // the key stops the time
,
getTimer("timeout").wait() // wait for the timeout to finish (no keypress, the time isn't stoped) ???
,
getVar("RT").set( v => Date.now() - v )  // set Reaction Time value BEFORE the msg for the timeout
,
getImage('stimuli').remove()
,
getKey("answerKey").disable().test.pressed().failure(
             newText("Incorrect", "Consegue ir mais rápido? ⏰").center().print(),
             newTimer('wait-feedback',500).start().wait()
         )
         
)
  .log("item", row.item)
  .log("direction",row.direction)
  .log("block", row.block)
  .log("correctKey", row.correctKey)
  .log("condition", row.condition)
  .log( "ReactionTime" , getVar("RT") 
 );


// NEUTRAL TRIAL: 👇

Template( "simonStimuliNeutral.csv", makeTrial("neutral--block") );

// CONFLICT TRIAL: 👇

Template( "simonStimuliConflict.csv", makeTrial("conflict--block") );

// 👉 Send results:

SendResults("sendResults");

// 👉 Final screen

newTrial ("final-screen-trial" ,
exitFullscreen()
,
defaultText.center()
    .print()
    .cssContainer({
          'margin-top': '1.5em',
          'text-align': 'center',
          "justify-content": 'center',
          "align-items": 'center' ,
          'font-size': '35px',
          "white-space": "nowrap",
  })
,
newText("final--msg", "<i style= 'color:red; background-color: yellow; border-radius: 5px;';>Espere</i> o professor agora ⏰!")
     .center().print()
    .cssContainer({
          'font-size': '45px',
          "white-space": "nowrap"  
})
,
newCanvas("my-canvas--5", 950, 625) // 950, 625
      .add(210,130, getText("final--msg"))
      .add(350, 280, newImage('wait-ast', 'fogete3.JPG')
      .css({
                        "width": "15em", // Replace with the desired width of the image in em units
                        "height": "15em", // Replace with the desired height of the image in em units 
                        "border-radius": "50%",
                        "border": "8px solid black",
                        "left": '50%'
                         })
) 
      
      .cssContainer({
        "padding": "1,5em",
        "background-color": '#FFFCF1',
        "border-radius": '25px',
        "border": '2px solid #73AD21',
        "background-image": "url('room1.jpg')", 
        "background-size": "cover",
      })
      .center()
      .print()
, 
newButton().wait() // // Stay on this page forever
);
 
// 👉 de bug off///

 PennController.DebugOff();  
 
 
///////////////////////////////////// REPEATING STUFF ////////////////////////

// COUNTDOWN TRIAL 2👇

newTrial("countdownTrial--2",
newFunction(() => {$("body").css("background-image", "url(back5.jpg)");}).call()
,
getVar("errorCount").set(0) // always reset the errorCount before countdown
,
//newTimer('biggerTimer', 5000).start()
newAudio('countdownAudio', 'cutCountdown.mp3').play()
,
    newVar("finishTime").set(v=>Date.now()+3000) // 5000ms = 5s
    ,
    newText("countDown", "3").print().center()
    .cssContainer({
        "text-align": "center",
        "font-size": "150px",
        "font-family": "Comic Sans MS"
    })
    ,
    // This Timer element will execute a callback after 1s
    newTimer("updateCountdown",1000).callback( 
        newVar("difference")
            .set(getVar("finishTime")).set(v=>v-Date.now())
            .test.is(v=>v>0) // Positive value means current time still below finish time
            .success(
                // Transform the Var element into an appropriately formatted string
                getVar("difference")
                    .set(v => Math.round(v / 1000)) // display time in s (ms/1000)
                ,
                getText("countDown").text(getVar("difference")) // update the text variable
                ,
                // Relaunch the timer to update again in 1s
                getTimer("updateCountdown").start()
            )
    ).start() // Don't forget to start the timer the initially
    ,
    newCanvas("my-canvas-3", 1300, 725) // 950, 625
    .add(570, 215, getText("countDown"))
        .cssContainer({
        "padding": "2em",
        "background-color": '#FFFCF1',
        "border-radius": '25px',
        "border": '2px solid #73AD21',
        "background-image": "url('room1.jpg')", 
        "background-size": "cover",
      })
      .center()
      .print()
    ,
   // getTimer('biggerTimer').wait()
   getAudio('countdownAudio').wait()
);


// SHALL WE BEGIN - TRIAL ? 👇

newTrial("begin--trial--2",

// see if I can access the var of the other TRIAL

// newText("display-test").text( getVar("errorCount") ).print()

getVar("errorCount").test.is(v => v >= 2).success( // test if errorCount is >= 2
                     //   newText(" 2 errors !").center().print()  // PRINT ERROR ON SCREEN
                     //   ,
                        // getVar("errorCount").set(0) // reset the errorCount
                        // ,
                        newAudio('practiceAgainAud', 'practiceAgainAudio.mp3').play().wait('first')
                        ,
                        newFunction(() => {$("body").css("background-image", "url(back5.jpg)");}).call()
                      //  ,
                    //    exitFullscreen()
                        ,
                        jump("countdownTrial--2") // jump to instructions if errorCount >= 2
                    )
                    .failure( 
                        //newText(" NO 2 !").center().print(), // PRINT NO TWO ERRORS ON SCREEN
                     //    , 
                        newAudio('getReady', 'prepareSE.mp3').play().wait('first') // play audio and move on 
                    
            )
);


